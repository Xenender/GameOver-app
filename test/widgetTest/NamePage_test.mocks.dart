// Mocks generated by Mockito 5.4.4 from annotations
// in gameover_app/test/NamePage_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:flutter/src/widgets/navigator.dart' as _i7;
import 'package:gameover_app/repository/User_model.dart' as _i5;
import 'package:gameover_app/repository/User_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [User_repository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUser_repository extends _i1.Mock implements _i2.User_repository {
  MockUser_repository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set firebaseMock(_i3.FirebaseFirestore? _firebaseMock) => super.noSuchMethod(
        Invocation.setter(
          #firebaseMock,
          _firebaseMock,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<String> createUser(_i5.User_model? user) => (super.noSuchMethod(
        Invocation.method(
          #createUser,
          [user],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #createUser,
            [user],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<List<_i5.User_model>> allUser() => (super.noSuchMethod(
        Invocation.method(
          #allUser,
          [],
        ),
        returnValue: _i4.Future<List<_i5.User_model>>.value(<_i5.User_model>[]),
      ) as _i4.Future<List<_i5.User_model>>);

  @override
  _i4.Future<int?> getUserScore(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserScore,
          [userId],
        ),
        returnValue: _i4.Future<int?>.value(),
      ) as _i4.Future<int?>);

  @override
  _i4.Future<void> updateUserScore(
    String? userId,
    int? newScore,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserScore,
          [
            userId,
            newScore,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addToUserScore(
    String? userId,
    int? scoreToAdd,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToUserScore,
          [
            userId,
            scoreToAdd,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> updateUserPseudo(
    String? userId,
    String? newPseudo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserPseudo,
          [
            userId,
            newPseudo,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getUserImagePath(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #getUserImagePath,
          [userId],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<bool> deleteUserByName(String? username) => (super.noSuchMethod(
        Invocation.method(
          #deleteUserByName,
          [username],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i7.NavigatorObserver {
  @override
  void didPush(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didPop(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didRemove(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didReplace({
    _i7.Route<dynamic>? newRoute,
    _i7.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStartUserGesture(
    _i7.Route<dynamic>? route,
    _i7.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
